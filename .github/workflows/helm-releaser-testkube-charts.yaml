name: Releasing Helm charts.

on:
  push:
    paths:
      - 'charts/testkube**'
      - 'charts/api-server/**'
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER_NAME_DEV: ${{ secrets.GKE_CLUSTER_NAME_DEV }}    # Add your cluster name here.
  GKE_ZONE_DEV: ${{ secrets.GKE_ZONE_DEV }}   # Add your cluster zone here.
  DEPLOYMENT_NAME: testkube # Add your deployment name here.
  TEST_SUITE_FILE_NAME: TestKube-Sanity.postman_collection.json
  TEST_SUITE_FILE_PATH: test/e2e

jobs:

  release_charts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - name: Installing repositories
        run: |
          helm repo add helm-charts https://kubeshop.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.2.1
        with:
          charts_dir:  charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: true

  notify_slack_if_helm_chart_release_fails:
    runs-on: ubuntu-latest
    needs: release_charts
    if: always() && (needs.release_charts.result == 'failure')
    steps:
    - name: Slack Notification if Helm Release action failed
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: testkube-logs
        SLACK_COLOR: ${{ needs.release_charts.result }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_TITLE: Helm Chart release action failed :boom:!
        SLACK_USERNAME: GitHub
        SLACK_LINK_NAMES: true
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: "Kubeshop --> TestKube"

  refreshing_gh_pages:
    needs: release_charts
    runs-on: ubuntu-latest
    steps:
      - name: Triggering refresh for GH-pages to make just released charts available
        run: |
          curl -s --fail --request POST \
            --url https://api.github.com/repos/kubeshop/helm-charts/pages/builds \
            --header "Authorization: Bearer $USER_TOKEN"
        env:
          # You must create a personal token with repo access as GitHub does
          # not yet support server-to-server page builds.
          USER_TOKEN: ${{ secrets.USER_TOKEN }}

  checking_that_ghpages_updated:
    needs: refreshing_gh_pages
    runs-on: ubuntu-latest
    steps:
      - name: Making sure that they are abvailable now.
        run: |
          status=""
          counter=0
          while [[ $status != \"built\" ]]
          do
              status=$(curl -s \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/kubeshop/helm-charts/pages/builds/latest \
              --header "Authorization: Bearer $USER_TOKEN" | jq .status)
              echo "Checking latest GH pages build status --> $status"
              sleep 5

              counter=$(expr $counter + 1)
              if [[ $status == \"errored\" ]] || [[ $counter == 120 ]]; then
                echo "Something went wrong. Please check GH's pages issues."
                exit 1
              fi
          done
        env:
          # You must create a personal token with repo access as GitHub does
          # not yet support server-to-server page builds.
          USER_TOKEN: ${{ secrets.USER_TOKEN }}

  notify_slack_if_release_succeeds:
    runs-on: ubuntu-latest
    needs: checking_that_ghpages_updated
    steps:
    - name: Slack Notification if the helm release pipeline succeeded.
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: testkube-logs
        SLACK_COLOR: ${{ needs.checking_that_ghpages_updated.result }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_TITLE: Helm chart release succeed and GH pages got updated :party_blob:!
        SLACK_USERNAME: GitHub
        SLACK_LINK_NAMES: true
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: "Kubeshop --> TestKube"

  notify_slack_if_gh_pages_update_failed:
    runs-on: ubuntu-latest
    needs: checking_that_ghpages_updated
    if: always() && (needs.checking_that_ghpages_updated.result == 'failure')
    steps:
    - name: Slack Notification if the helm release GH Pages failed.
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: testkube-logs
        SLACK_COLOR: ${{ needs.checking_that_ghpages_updated.result }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_TITLE: Helm chart release failed on GH pages update! :boom:!
        SLACK_USERNAME: GitHub
        SLACK_LINK_NAMES: true
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: "Kubeshop --> TestKube"

  deploy-to-testkube-dev-gke:
    name: Deploy
    runs-on: ubuntu-latest
    needs: notify_slack_if_release_succeeds
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME_DEV }}
          location: ${{ env.GKE_ZONE_DEV }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - name: Installing repositories
        run: |
          helm repo add helm-charts https://kubeshop.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          helm upgrade --install --atomic --timeout 180s testkube helm-charts/testkube --namespace testkube --create-namespace --values ./charts/testkube/values-demo.yaml --debug

  notify_slack_if_deploy_dev_succeeds:
    runs-on: ubuntu-latest
    needs: deploy-to-testkube-dev-gke
    steps:
    - name: Slack Notification if the helm release deployment to DEV GKS succeeded.
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: testkube-logs
        SLACK_COLOR: ${{ needs.deploy-to-testkube-dev-gke.result }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_TITLE: Helm chart release successfully deployed into ${{ secrets.GKE_CLUSTER_NAME_DEV }} GKE :party_blob:!
        SLACK_USERNAME: GitHub
        SLACK_LINK_NAMES: true
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: "Kubeshop --> TestKube"

  notify_slack_if_deploy_dev_failed:
    runs-on: ubuntu-latest
    needs: deploy-to-testkube-dev-gke
    if: always() && (needs.deploy-to-testkube-dev-gke.result == 'failure')
    steps:
    - name: Slack Notification if the helm release deployment to DEV GKS failed.
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: testkube-logs
        SLACK_COLOR: ${{ needs.deploy-to-testkube-dev-gke.result }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_TITLE: Helm chart release failed to deploy into ${{ secrets.GKE_CLUSTER_NAME_DEV }} GKE! :boom:!
        SLACK_USERNAME: GitHub
        SLACK_LINK_NAMES: true
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: "Kubeshop --> TestKube"

  test_suite_run_dev:
    name: test suite for DEV GKE.
    runs-on: ubuntu-latest
    needs: deploy-to-testkube-dev-gke
    steps:

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME_DEV }}
          location: ${{ env.GKE_ZONE_DEV }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Runnning test suite
      - name: Run test suite
        run: |-
          # enabling debug mode
          set -x

          # Installing testkube kubectl plugin:
          bash < <(curl -sSLf https://kubeshop.github.io/testkube/install.sh )

          # Downloading test suite:
          curl -LOs https://raw.githubusercontent.com/kubeshop/testkube/main/${{ env.TEST_SUITE_FILE_PATH }}/${{ env.TEST_SUITE_FILE_NAME }}

          # Running Test suite:
          kubectl -n testkube delete script sanity || true
          kubectl -n testkube delete secret sanity-secrets || true
          kubectl testkube scripts create -f ./${{ env.TEST_SUITE_FILE_NAME }} --name sanity --type postman/collection
          kubectl testkube scripts start sanity -f -p api_uri=http://testkube-api-server:8088 -p script_api_uri=http://testkube-api-server:8088 -p script_type=postman/collection -p script_name=fill-me -p execution_name=fill-me

  notify_slack_if_test_suite_dev_succeeds:
    runs-on: ubuntu-latest
    needs: test_suite_run_dev
    steps:
    - name: Slack Notification if the test suite run on DEV GKS succeeded.
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: testkube-logs
        SLACK_COLOR: ${{ needs.test_suite_run_dev.result }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_TITLE: Test suite successfully run against ${{ secrets.GKE_CLUSTER_NAME_DEV }} GKE :party_blob:!
        SLACK_USERNAME: GitHub
        SLACK_LINK_NAMES: true
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: "Kubeshop --> TestKube"

  notify_slack_if_test_suite_failed:
    runs-on: ubuntu-latest
    needs: test_suite_run_dev
    if: always() && (needs.test_suite_run_dev.result == 'failure')
    steps:
    - name: Slack Notification if the test suite run on DEV GKS failed.
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: testkube-logs
        SLACK_COLOR: ${{ needs.test_suite_run_dev.result }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_TITLE: Test suite FAILED to run on ${{ secrets.GKE_CLUSTER_NAME_DEV }} GKE! :boom:!
        SLACK_USERNAME: GitHub
        SLACK_LINK_NAMES: true
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: "Kubeshop --> TestKube"