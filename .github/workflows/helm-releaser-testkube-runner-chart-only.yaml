name: Releasing Testkube runner helm chart

concurrency: develop_cluster

on:
  workflow_dispatch:

  push:
    paths:
      - "charts/testkube-runner/**"
      - "!charts/testkube-runner/Chart.yaml"
    branches:
      - main

jobs:
  release_charts:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Install helm file plugin
        run: helm plugin add https://github.com/zoobab/helm_file_repo

      - name: Extract Helm Chart version
        id: helm-version
        uses: mikefarah/yq@master
        with:
          cmd: yq '.version' charts/testkube-runner/Chart.yaml

      - name: Update runner Chart.yaml
        run: |
          cd ./scripts
          chmod +x runner_chart_releaser.sh
          ./runner_chart_releaser.sh --runner-chart true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish Helm Chart
        run: |
          REGISTRY=registry-1.docker.io
          echo ${{ secrets.DOCKERHUB_TOKEN }} | helm registry login ${REGISTRY} --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          helm dependency build charts/testkube-runner
          helm package charts/testkube-runner
          helm push testkube-runner-${{ steps.helm-version.outputs.result }}.tgz oci://${REGISTRY}/kubeshop

      - uses: actions/checkout@v4
        with:
          ref: "gh-pages"
          token: ${{ secrets.CI_BOT_TOKEN }}

      - id: update-index
        name: Pull charts and update index
        run: |
          # Testkube Runner
          chart_name=testkube-runner
          chart_version=${{ steps.helm-version.outputs.result }} 

          ## Update index
          # Download published asset
          mkdir ./download
          helm pull "oci://registry-1.docker.io/kubeshop/${chart_name}" --version "${chart_version}" --destination ./download
          # Rebuild index
          helm repo index --url oci://registry-1.docker.io/kubeshop --merge index.yaml ./download
          # Replace .tgz in URL with OCI tag
          sed -i "s|oci://registry-1.docker.io/kubeshop/$chart_name-$chart_version.tgz|oci://registry-1.docker.io/kubeshop/$chart_name:$chart_version|" ./download/index.yaml

          # Check repo can be loaded
          if ! helm repo add cache file://./download/ ; then
            echo "New index.yaml file can't be used as a file"
            exit 1
          else
            # Remove the repo
            helm repo remove cache
          fi
          cp ./download/index.yaml index.yaml

          # Remove chart files
          rm -rf ./download

          # Avoid overriding index branch when remote commit does not match our checkout commit
          current_commit_id=$(git rev-parse gh-pages)

          # Push changes
          git add index.yaml && git commit -m "Update index.yaml"
          git push origin gh-pages --force-with-lease=index:${current_commit_id}
  

  notify_slack_if_helm_chart_release_fails:
    runs-on: ubuntu-latest
    needs: release_charts
    if: always() && (needs.release_charts.result == 'failure')
    steps:
      - name: Slack Notification if Helm Release action failed
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testkube-logs
          SLACK_COLOR: ${{ needs.release_charts.result }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: Helm Chart release action failed :boom:!
          SLACK_USERNAME: GitHub
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: "Kubeshop --> TestKube"

  refreshing_gh_pages:
    needs: release_charts
    runs-on: ubuntu-latest
    steps:
      - name: Triggering refresh for GH-pages to make just released charts available
        run: |
          curl -s --fail --request POST \
            --url https://api.github.com/repos/kubeshop/helm-charts/pages/builds \
            --header "Authorization: Bearer $USER_TOKEN"
        env:
          # You must create a personal token with repo access as GitHub does
          # not yet support server-to-server page builds.
          USER_TOKEN: ${{ secrets.CI_BOT_TOKEN }}

  checking_that_ghpages_updated:
    needs: refreshing_gh_pages
    runs-on: ubuntu-latest
    steps:
      - name: Making sure that they are abvailable now.
        run: |
          status=""
          counter=0
          while [[ $status != \"built\" ]]
          do
              status=$(curl -s \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/kubeshop/helm-charts/pages/builds/latest \
              --header "Authorization: Bearer $USER_TOKEN" | jq .status)
              echo "Checking latest GH pages build status --> $status"
              sleep 5

              counter=$(expr $counter + 1)
              if [[ $status == \"errored\" ]] || [[ $counter == 120 ]]; then
                echo "Something went wrong. Please check GH's pages issues."
                exit 1
              fi
          done
        env:
          # You must create a personal token with repo access as GitHub does
          # not yet support server-to-server page builds.
          USER_TOKEN: ${{ secrets.CI_BOT_TOKEN }}

  notify_slack_if_release_succeeds:
    runs-on: ubuntu-latest
    needs: checking_that_ghpages_updated
    steps:
      - name: Slack Notification if the helm release pipeline succeeded.
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testkube-logs
          SLACK_COLOR: ${{ needs.checking_that_ghpages_updated.result }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: Helm chart release succeed and GH pages got updated :party_blob:!
          SLACK_USERNAME: GitHub
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: "Kubeshop --> TestKube"

  notify_slack_if_gh_pages_update_failed:
    runs-on: ubuntu-latest
    needs: checking_that_ghpages_updated
    if: always() && (needs.checking_that_ghpages_updated.result == 'failure')
    steps:
      - name: Slack Notification if the helm release GH Pages failed.
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testkube-logs
          SLACK_COLOR: ${{ needs.checking_that_ghpages_updated.result }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: Helm chart release failed on GH pages update! :boom:!
          SLACK_USERNAME: GitHub
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: "Kubeshop --> TestKube"
