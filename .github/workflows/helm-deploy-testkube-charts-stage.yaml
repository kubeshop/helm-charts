name: Releasing Testkube Helm charts to Stage k8s Cluster.

on:
  repository_dispatch:
    types: [trigger-workflow]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER_NAME_STAGE: ${{ secrets.GKE_CLUSTER_NAME_STAGE }} # Add your cluster name here.
  GKE_ZONE_STAGE: ${{ secrets.GKE_ZONE_STAGE }} # Add your cluster zone here.
  DEPLOYMENT_NAME: testkube # Add your deployment name here.
  POSTMAN_TEST_FILE_NANE: TestKube-Sanity.postman_collection.json
  POSTMAN_TEST_FILE_PATH: test/postman

jobs:
  deploy-to-testkube-stage-gke:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.ref }}
      - run: echo ${{ github.event.client_payload.image_tag }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME_STAGE }}
          location: ${{ env.GKE_ZONE_STAGE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - name: Installing repositories
        run: |
          helm repo add helm-charts https://kubeshop.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          helm upgrade --install --atomic --timeout 180s testkube helm-charts/testkube --namespace testkube --create-namespace --set testkube-api.image.tag=${{ github.event.client_payload.image_tag }} --values ./charts/testkube/values-demo.yaml

  notify_slack_if_deploy_stage_succeeds:
    runs-on: ubuntu-latest
    needs: deploy-to-testkube-stage-gke
    steps:
      - name: Slack Notification if the helm release deployment to STAGE GKS succeeded.
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testkube-logs
          SLACK_COLOR: ${{ needs.deploy-to-testkube-stage-gke.result }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: Helm chart release successfully deployed into ${{ secrets.GKE_CLUSTER_NAME_STAGE }} GKE :party_blob:!
          SLACK_USERNAME: GitHub
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: "Kubeshop --> TestKube"

  notify_slack_if_deploy_stage_failed:
    runs-on: ubuntu-latest
    needs: deploy-to-testkube-stage-gke
    if: always() && (needs.deploy-to-testkube-stage-gke.result == 'failure')
    steps:
      - name: Slack Notification if the helm release deployment to STAGE GKS failed.
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testkube-logs
          SLACK_COLOR: ${{ needs.deploy-to-testkube-stage-gke.result }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: Helm chart release failed to deploy into ${{ secrets.GKE_CLUSTER_NAME_STAGE }} GKE! :boom:!
          SLACK_USERNAME: GitHub
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: "Kubeshop --> TestKube"

  test_suite_run_stage:
    name: test suite for STAGE GKE
    runs-on: ubuntu-latest
    needs: deploy-to-testkube-stage-gke
    steps:
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME_STAGE }}
          location: ${{ env.GKE_ZONE_STAGE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Runnning test suite
      - name: Run test suite
        run: |-
          # enabling debug mode
          set -x

          # Installing testkube kubectl plugin:
          bash < <(curl -sSLf https://kubeshop.github.io/testkube/install.sh )

          # Downloading test suite:
          curl -LOs https://raw.githubusercontent.com/kubeshop/testkube/main/${{ env.POSTMAN_TEST_FILE_PATH }}/${{ env.POSTMAN_TEST_FILE_NANE }}

          # Running Test suite:
          kubectl -n testkube delete test sanity || true
          kubectl -n testkube delete secret sanity-secrets || true
          kubectl testkube create test -f ./${{ env.POSTMAN_TEST_FILE_NANE }} --name sanity --type postman/collection
          kubectl testkube run test sanity -f -p api_uri=http://testkube-api-server:8088 -p test_api_uri=http://testkube-api-server:8088 -p test_type=postman/collection -p test_name=fill-me -p execution_name=fill-me

  notify_slack_if_test_suite_stage_succeeds:
    runs-on: ubuntu-latest
    needs: test_suite_run_stage
    steps:
      - name: Slack Notification if the test suite run on STAGE GKS succeeded.
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testkube-logs
          SLACK_COLOR: ${{ needs.test_suite_run_stage.result }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: Test suite successfully run against ${{ secrets.GKE_CLUSTER_NAME_STAGE }} GKE :party_blob:!
          SLACK_USERNAME: GitHub
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: "Kubeshop --> TestKube"

  notify_slack_if_test_suite_failed:
    runs-on: ubuntu-latest
    needs: test_suite_run_stage
    if: always() && (needs.test_suite_run_stage.result == 'failure')
    steps:
      - name: Slack Notification if the test suite run on STAGE GKS failed.
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: testkube-logs
          SLACK_COLOR: ${{ needs.test_suite_run_stage.result }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: Test suite FAILED to run on ${{ secrets.GKE_CLUSTER_NAME_STAGE }} GKE! :boom:!
          SLACK_USERNAME: GitHub
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: "Kubeshop --> TestKube"
