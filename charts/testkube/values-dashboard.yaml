# Dashboard values for testkube.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ""
  pullPolicy: Never
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: "testkube"
fullnameOverride: "testkube"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: "false"
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# For more configuration parameters of MongoDB chart please look here:
# https://github.com/bitnami/charts/tree/master/bitnami/mongodb#parameters
mongodb:
  nameOverride: "mongodb"
  fullnameOverride: "testkube-mongodb"
  architecture: "standalone"
  auth:
    enabled: false
    # rootPassword: "123DefaultOne321"
  service:
    port: "27017"
    portNmae: "mongodb"
    nodePort: true
    clusterIP: ""

api-server:
  nameOverride: "api-server"
  fullnameOverride: "testkube-api-server"
  image:
    repository: kubeshop/testkube-api-server
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    # TODO we should stick to static version
    # tag: "latest"
  service:
    type: NodePort # for working with real k8s we should use "ClusterIP" type.
    port: 8088
  minio:
    enabled: true
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "false"
      # specify the name of the global IP address resource to be associated with the HTTP(S) Load Balancer.
      kubernetes.io/ingress.global-static-ip-name: testkube-dashboard
      # add an annotation indicating the issuer to use.
      cert-manager.io/cluster-issuer: letsencrypt-prod
      # controls whether the ingress is modified ‘in-place’,
      # or a new one is created specifically for the HTTP01 challenge.
      acme.cert-manager.io/http01-edit-in-place: "true"
    path: /results/(v\d/.*)
    hosts:
      - dashboard.testkube.io
    tlsenabled: "true"
    tls: # < placing a host in the TLS config will indicate a certificate should be created
    - hosts:
      - dashboard.testkube.io
      secretName: testkube-dashboard-cert-secret
  storage:
    endpoint_port: "9000"
    accessKeyId: "minio"
    accessKey: "minio123"
    location: ""
    token: ""
    SSL: false
    scrapperEnabled: true
  mongoDSN: "mongodb://testkube-mongodb:27017"
  telemetryDisabled: false

prometheus:
  enabled: false

testkube-dashboard:
  enabled: true
  nameOverride: "dashboard"
  fullnameOverride: "testkube-dashboard"
  image:
    repository: kubeshop/testkube-dashboard
    pullPolicy: Always
    #tag: "main" #it will take the tag from appVersion
  service:
    type: NodePort
    port: 80
  ingress:
    enabled: "true"
    annotations: 
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "false"      
      # specify the name of the global IP address resource to be associated with the HTTP(S) Load Balancer.
      kubernetes.io/ingress.global-static-ip-name: testkube-dashboard
      # add an annotation indicating the issuer to use.
      cert-manager.io/cluster-issuer: letsencrypt-prod
      # controls whether the ingress is modified ‘in-place’,
      # or a new one is created specifically for the HTTP01 challenge.
      acme.cert-manager.io/http01-edit-in-place: "true"
    path: /
    hosts:
      - dashboard.testkube.io
    tlsenabled: "true"
    tls: # < placing a host in the TLS config will indicate a certificate should be created
    - hosts:
      - dashboard.testkube.io
      secretName: testkube-dashboard-cert-secret
  apiServerEndpoint: "" #get the address of the endpoint or set it using helm
