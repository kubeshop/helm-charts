# Stage values for testkube.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ""
  pullPolicy: Never
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: "testkube"
fullnameOverride: "testkube"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: "false"
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# For more configuration parameters of MongoDB chart please look here:
# https://github.com/bitnami/charts/tree/master/bitnami/mongodb#parameters
mongodb:
  enabled: true
  nameOverride: "mongodb"
  fullnameOverride: "testkube-mongodb"
  architecture: "standalone"
  auth:
    enabled: false
    # rootPassword: "123DefaultOne321"
  service:
    port: "27017"
    portName: "mongodb"
    nodePort: true
    clusterIP: ""
  ## Image built with ZCube tool so that it can be run on ARM nodes: https://github.com/ZCube/bitnami-compat/tree/main/patches
  ## Currently Bitnami doesn't support ARM: https://github.com/bitnami/charts/issues/7305
  image:
    registry: docker.io
    repository: zcube/bitnami-compat-mongodb
    tag: 5.0.10-debian-11-r19

nats:
  # NATS container settings
  nats:
    limits:
      # -- Max payload
      maxPayload: 8MB

testkube-api:
  prometheus:
    enabled: false
  nameOverride: "api-server"
  fullnameOverride: "testkube-api-server"
  image:
    repository: kubeshop/testkube-api-server
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    # TODO we should stick to static version
    # tag: "latest"
  service:
    type: ClusterIP
    port: 8088
  minio:
    enabled: true
    nodeSelector: {}
    tolerations: []
    affinity: {}
    image:
      registry: docker.io
      repository: minio/minio
      tag: latest
  uiIngress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "false"
      # specify the name of the global IP address resource to be associated with the HTTP(S) Load Balancer.
      kubernetes.io/ingress.global-static-ip-name: testkube-prerelease
      # add an annotation indicating the issuer to use.
      # cert-manager.io/cluster-issuer: letsencrypt-prod
      # controls whether the ingress is modified ‘in-place’,
      # or a new one is created specifically for the HTTP01 challenge.
      # acme.cert-manager.io/http01-edit-in-place: "true"

      # for websockets
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"

      nginx.ingress.kubernetes.io/server-snippet: |
        set $methodallowed "";
        set $pathallowed "";

        if ( $request_method = GET ){
          set $methodallowed "true";
          set $pathallowed "true";
        }

        if ( $request_method = POST ){
          set $methodallowed "true";
        }

        if ( $request_method = OPTIONS ){
          set $methodallowed "true";
        } 

        if ( $uri ~ "^(.*)/tests/(.*)/executions$" ){
          set $pathallowed "true";
        }  

        if ( $uri ~ "^(.*)/test-suites/(.*)/executions$" ){
          set $pathallowed "true";
        }

        if ( $uri ~ "^(.*)/tests$" ){
          set $pathallowed "true";
        }

        if ( $uri ~ "^(.*)/repositories$" ){
          set $pathallowed "true";
        }

        set $condition "$methodallowed+$pathallowed";
        if ( $condition != "true+true" ) {
          return 401;
        }
    path: /results/(v\d/.*)
    hosts:
      - beta.testkube.io
    tlsenabled: "true"
    tls: # < placing a host in the TLS config will indicate a certificate should be created
      - hosts:
          - beta.testkube.io
        secretName: testkube-prod-cert-secret
  cliIngress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-CLI-Ingress: true";
    # parameters to check oauth token (by default github one)
    oauth:
      clientID: ""
      clientSecret: ""
      provider: "github"
      scopes: ""
      path: /results/(v\d/.*)
    hosts:
      - beta.testkube.io
    tlsenabled: "false"
    tls: # < placing a host in the TLS config will indicate a certificate should be created
      - hosts:
          - beta.testkube.io
        secretName: testkube-prod-cert-secret
  storage:
    endpoint: ""
    endpoint_port: "9000"
    accessKeyId: "minio"
    accessKey: "minio123"
    region: ""
    token: ""
    bucket: "testkube-artifacts"
    # -- MinIO Expiration period in days
    expiration: 0
    SSL: false
    scrapperEnabled: true

  ## Logs storage for Testkube API.
  logs:
    ## where the logs should be stored there are 2 possible valuse : minio|mongo
    storage: "minio"
    ## if storage is set to minio then the bucket must be specified, if minio with s3 is used make sure to use a unique name
    bucket: "testkube-logs"

  mongodb:
    dsn: "mongodb://testkube-mongodb:27017"
    # or you can pass mongo dsn from secret
    # secretName: testkube-secrets
    # secretKey: mongo-dsn
    allowDiskUse: true

  ## Set custom livenessProbe
  livenessProbe:
    ## Probe type
    httpGet:
      path: /health
      port: http
      scheme: HTTP
    ## Amount of request failures before the container receives a terminate signal
    failureThreshold: 3
    ## Time to wait after the initial deployment before performing first probe
    initialDelaySeconds: 180
    ## How often (in seconds) to perform the probes. This value sends one probe every 30 seconds
    periodSeconds: 30
    ## Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
    ## Number of seconds after which the probe times out
    timeoutSeconds: 10

  ## Set custom readinessProbe
  readinessProbe:
    ## Probe type
    httpGet:
      path: /health
      port: http
      scheme: HTTP
    ## Amount of request failures before the container receives a terminate signal
    failureThreshold: 3
    ## Time to wait after the initial deployment before performing first probe
    initialDelaySeconds: 60
    ## How often (in seconds) to perform the probes. This value sends one probe every 30 seconds
    periodSeconds: 30
    ## Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
    ## Number of seconds after which the probe times out
    timeoutSeconds: 10

  analyticsEnabled: true
  podStartTimeout: "30m"
  slackToken: ""
  slackSecret: ""
  slackTemplate: ""
  slackConfig: ""
  executors: ""
  cdeventsTarget: ""
  dashboardUri: ""

  ##Test Connection pod
  testConnection:
    enabled: true

testkube-dashboard:
  enabled: true
  nameOverride: "dashboard"
  fullnameOverride: "testkube-dashboard"
  image:
    repository: kubeshop/testkube-dashboard
    pullPolicy: IfNotPresent
    #tag: "main" #it will take the tag from appVersion
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: "true"
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "false"
      # specify the name of the global IP address resource to be associated with the HTTP(S) Load Balancer.
      kubernetes.io/ingress.global-static-ip-name: testkube-prerelease
      # add an annotation indicating the issuer to use.
      cert-manager.io/cluster-issuer: letsencrypt-prod
      # controls whether the ingress is modified ‘in-place’,
      # or a new one is created specifically for the HTTP01 challenge.
      acme.cert-manager.io/http01-edit-in-place: "true"
    path: /
    hosts:
      - beta.testkube.io
    tlsenabled: "true"
    tls: # < placing a host in the TLS config will indicate a certificate should be created
      - hosts:
          - beta.testkube.io
        secretName: testkube-prod-cert-secret
  apiServerEndpoint: "beta.testkube.io/results" #get the address of the endpoint or set it using helm
  disableTelemetry: true
  oauth2:
    enabled: false
    name: oauth2-proxy
    path: /oauth2
    port: 4180
    selector: k8s-app
    image:
      repository: quay.io/oauth2-proxy/oauth2-proxy
      tag: latest
      pullPolicy: Always
    env:
      clientId: ""
      clientSecret: ""
      githubOrg: ""
      cookieSecret: ""
      cookieSecure: "false"
      redirectUrl: "http://beta.testkube.io/oauth2/callback"

  ##Test Connection pod
  testConnection:
    enabled: true

testkube-operator:
  ##Proxy Image parameters
  ## image.registry Proxy image registry
  ## image.repository Proxy image name
  ## image.tag Proxy image tag
  ## image.pullPolicy Proxy Image pull policy
  proxy:
    image:
      registry: gcr.io
      repository: kubebuilder/kube-rbac-proxy
      tag: "v0.8.0"
    ## Proxy Container Port
    containerPort: 8443

  ##Test Connection pod
  testConnection:
    enabled: true

